//===========================================================================
// Program ID...: LegalDiary
// Author.......: Francois De Bruin Meyer
// Copyright....: BlueCrane Software Development CC
// Date.........: 05 December 2014
//---------------------------------------------------------------------------
// Description..: Set Multi Company Support for First Run Utility
//---------------------------------------------------------------------------
// Changes......:
//===========================================================================

//---------------------------------------------------------------------------
// Include statements
//---------------------------------------------------------------------------
#include <vcl.h>
#include "Registry.hpp"
#pragma hdrstop

#include "LPMS_FirstRunMultiCpy.h"
#include "LPMS_FirstRunApp.h"

//---------------------------------------------------------------------------
// Autogenerated statements
//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma link "JvCipher"
#pragma link "JvComponentBase"
#pragma resource "*.dfm"

//---------------------------------------------------------------------------
//Global Definitions
//---------------------------------------------------------------------------
#define CYPHER_ENC       0
#define CYPHER_DEC       1

//--- Temporary - Allow both old style encoding and new style encoding but
//--- only one type at a time

//#define NEW_ENCODING

TFLPMS_FirstRunMultiCpy *FLPMS_FirstRunMultiCpy;

//---------------------------------------------------------------------------
// Constructor
//---------------------------------------------------------------------------
__fastcall TFLPMS_FirstRunMultiCpy::TFLPMS_FirstRunMultiCpy(TComponent* Owner)
   : TForm(Owner)
{
}

//---------------------------------------------------------------------------
// Executed before the form is shown
//---------------------------------------------------------------------------
void __fastcall TFLPMS_FirstRunMultiCpy::FormActivate(TObject *Sender)
{
   AnsiString        ThisDBPrefix;
   TRegistryIniFile *RegIni;

	RegIni = new TRegistryIniFile("Software\\BlueCrane Software\\LPMS 3");
   MultiCompany = RegIni->ReadBool("Preferences","MultiCompany",false);
   DBPrefix     = RegIni->ReadString("Preferences","DBPrefix","invalid");
   delete RegIni;

#ifdef NEW_ENCODING
      ThisDBPrefix = FLPMS_FirstRunApp->Vignere(CYPHER_DEC,DBPrefix.c_str(),FLPMS_FirstRunApp->ThisPass.c_str());
#else
      ThisDBPrefix = jvCipher->DecodeString(FLPMS_FirstRunApp->ThisPass,DBPrefix);
#endif

   if (MultiCompany == true)
   {
      cbMultiCpy->Checked = true;
      edtDBPrefix->Text   = "";
      btnOK->Enabled      = false;
   }
   else
   {
      cbMultiCpy->Checked = false;
      edtDBPrefix->Text   = ThisDBPrefix.SubString(1,6);
   }

   edtDBPrefix->SetFocus();
}

//---------------------------------------------------------------------------
// User changed the DBPrefix
//---------------------------------------------------------------------------
void __fastcall TFLPMS_FirstRunMultiCpy::edtDBPrefixChange(TObject *Sender)
{
   if (edtDBPrefix->Text.Length() == 6)
      btnOK->Enabled = true;
   else
      btnOK->Enabled = false;
}

//---------------------------------------------------------------------------
// User clicked on the 'OK' button
//---------------------------------------------------------------------------
void __fastcall TFLPMS_FirstRunMultiCpy::btnOKClick(TObject *Sender)
{
   bool              KeyExists;
   AnsiString        ThisDBPrefix;
   TRegistryIniFile *RegIni;

//--- Check whether the company that was selected exists

   if (cbMultiCpy->Checked == true)
      RegIni = new TRegistryIniFile("Software\\BlueCrane Software\\LPMS 3\\" + edtDBPrefix->Text);
   else
      RegIni = new TRegistryIniFile("Software\\BlueCrane Software\\LPMS 3");

   KeyExists = RegIni->ValueExists("Preferences","DBPrefix");

   if (KeyExists == true)
   {
      ThisDBPrefix = RegIni->ReadString("Preferences","DBPrefix","******");

#ifdef NEW_ENCODING
      ThisDBPrefix = FLPMS_FirstRunApp->Vignere(CYPHER_DEC,ThisDBPrefix.c_str(),FLPMS_FirstRunApp->ThisPass.c_str());
#else
      ThisDBPrefix = jvCipher->DecodeString(FLPMS_FirstRunApp->ThisPass,ThisDBPrefix);
#endif

      if (edtDBPrefix->Text == ThisDBPrefix.SubString(1,6) || ThisDBPrefix.SubString(1,6) == "invali")
      {
         FLPMS_FirstRunApp->MultiCompany = cbMultiCpy->Checked;
         FLPMS_FirstRunApp->ThisDBPrefix = edtDBPrefix->Text;
         delete RegIni;
         Close();
         return;
      }
   }

   MessageBox(NULL,"'DBPrefix' is invalid or spelled incorrectly.","Legal Practise Management System - FirstRun",(MB_OK|MB_ICONSTOP|MB_SYSTEMMODAL));
   delete RegIni;
   return;
}

//---------------------------------------------------------------------------
// User clicked on the cancel button
//---------------------------------------------------------------------------
void __fastcall TFLPMS_FirstRunMultiCpy::btnCancelClick(TObject *Sender)
{
   FLPMS_FirstRunApp->Proceed = false;
   Close();
}

//---------------------------------------------------------------------------

